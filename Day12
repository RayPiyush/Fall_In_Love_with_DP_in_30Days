//Pseudo Code

1. Read the value of 'n' from the user to determine the number of elements in the array.

2. Create an integer array 'arr' of size 'n' to store the elements of the input array.

3. Read 'n' integers from the user and store them in the 'arr' array.

4. Initialize a 2D integer array 'dp' of size (n+1) x (n+1) to store the minimum cost of merging subarrays.

5. Calculate the minimum cost for all subarrays of length 1:
   - For each element in the 'arr' array, set 'dp[i+1][i+1]' to the value of 'arr[i]' (where 'i' is zero-based).

6. Calculate the minimum cost for all subarrays of length 2:
   - For each pair of adjacent elements in 'arr', set 'dp[i+1][i+2]' to the sum of 'arr[i]' and 'arr[i+1]'.

7. Calculate the minimum cost for subarrays of length 3 or more:
   - Iterate over the length of subarrays, 'length', starting from 3 up to 'n'.
   - Use two nested loops to iterate over 'i' and 'j' within the bounds of the 'dp' array for the current 'length':
     - Initialize a variable 'k' to 'i'.
     - Initialize 'ans' to a maximum integer value.
     - Iterate over 'k' from 'i' to 'j-1':
       - Calculate 'possibilityans' as 'dp[i][k] + dp[k+1][j] + sum(arr, i-1, j-1)'.
       - Update 'ans' to the minimum value between 'ans' and 'possibilityans'.
     - Set 'dp[i][j]' to 'ans'.
     - Increment 'i' and 'j'.

8. After completing the dynamic programming table, the minimum cost of merging the entire array is stored in 'dp[1][n]'.

9. Output the value of 'dp[1][n]' as the minimum cost of merging the entire array.
-----------------------------------------------------------------------
//Java code

import java.util.*;
import java.lang.*;
import java.io.*;
 
/* Name of the class has to be "Main" only if the class is public. */
class Ideone
{
	public static int sum(int[] arr,int si, int ei){
		int sum=0;
		for(int i=si;i<=ei;i++){
			sum=sum+arr[i];
		}
		return sum;
	}
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Scanner scn=new Scanner(System.in);
		int n=scn.nextInt();
		int[] arr=new int[n];
		for(int i=0;i<n;i++){
			arr[i]=scn.nextInt();
		}
 
		// 5 8 2 10
		int[][] dp=new int[n+1][n+1];
 
		//Calulating all subarrays of length 1
		for(int i=0;i<n;i++){
			dp[i+1][i+1]=arr[i];    //dp[1][1]=arr[0] dp[2][2]=arr[1]
		}
 
		//Calculating all subarrays of length 2
		for(int i=0;i<n-1;i++){
			dp[i+1][i+2]=arr[i]+arr[i+1];    //dp[1][2]=arr[0]+arr[1]
		}
 
		// Calculating for all subarrays
 
		// 5 8 2 10
		// dp[1][4]=Math.min(dp[1][1]+dp[2][4]+sum[1-4],dp[1,2]+dp[3][4]+sum(1,2,3,4))
		int length=3;
		while(length<=n){
			int i=1;
			int j=i+length-1;
			while(j<=n){
				int k=i;
				int ans=Integer.MAX_VALUE;
				while(k<j){
					int possibilityans=dp[i][k]+dp[k+1][j]+sum(arr,i-1,j-1);
					ans=Math.min(ans,possibilityans);
					k++;
				}
				dp[i][j]=ans;
				i++;
				j++;
			}
			length++;
		}
	  System.out.println(dp[1][n]);	
 
	}
