//Pseudo Code
-->n 
-->cost[n+1]->1-based indexing 
->dp[n+1]-->0
dp[1] = 0
dp[2] = abs(cost[2]-cost[1])
dp[3] = abs(cost[3]-cost[2]) + dp[2]
i = 4 
while(i<=n){
 
    dp[i] = min(abs(cost[i]-cost[i-1]) + dp[i-1],
    cost[i]-cost[i-3] + dp[i-3])
 
    i++
}
print(dp[n])
-------------------------------------------------------------------------
//Java Code
public class MinimumCostToReachDestination {
    public static void main(String[] args) {
        int[] cost = {4, 12, 13, 18, 10, 12}; // Replace this with your actual cost array
        int n = cost.length; // n is the last index

        // Initialize dp array
        int[] dp = new int[n+1];
        dp[1] = 0;
        dp[2] = Math.abs(cost[2]-cost[1])
        dp[3] = Math.abs(cost[3]-cost[2]) + dp[2]

        int i=4;
        while(i<=n){
            dp[i] = Math.min(
                Math.abs(cost[i] - cost[i - 1]) + dp[i - 1],
                Math.abs(cost[i] - cost[i - 3]) + dp[i - 3]);
        }

        // The minimum cost to reach the last index is stored in dp[n]
        System.out.println("Minimum cost to reach the last index: " + dp[n]);
    }
}

//CPP Code:
#include <iostream>
#include <vector>
#include <algorithm>

int main() {
    std::vector<int> cost = {4, 12, 13, 18, 10, 12}; // Replace this with your actual cost array
    int n = cost.size(); // n is the last index

    // Initialize dp array
    std::vector<int> dp(n + 1);
    dp[1] = 0;
    dp[2] = std::abs(cost[2] - cost[1]);
    dp[3] = std::abs(cost[3] - cost[2]) + dp[2];

    int i = 4;
    while (i <= n) {
        dp[i] = std::min(
            std::abs(cost[i] - cost[i - 1]) + dp[i - 1],
            std::abs(cost[i] - cost[i - 3]) + dp[i - 3]
        );
        i++;
    }

    // The minimum cost to reach the last index is stored in dp[n]
    std::cout << "Minimum cost to reach the last index: " << dp[n] << std::endl;

    return 0;
}

