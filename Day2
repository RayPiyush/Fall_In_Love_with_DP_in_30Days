//Question Link: https://www.geeksforgeeks.org/maximum-sum-such-that-no-two-elements-are-adjacent/

//Pseudo Code
function calculateMaxSubsetSum():
    // Read the input
    n = readInteger() // Read the number of elements in the array
    a = new Array(n+1) // Initialize an array with 1-based indexing
    i = 1
    while i <= n:
        a[i] = readInteger() // Read each element of the array
        i = i + 1

    // Initialize the dp array
    dp = new Array(n+1)
    l = 0
    dp[1] = max(a[1], l)
    dp[2] = max(a[1], max(a[2], l))

    // Calculate dp[i] using the formula dp[i] = max(dp[i-1], a[i] + dp[i-2])
    i = 3
    while i <= n:
        dp[i] = max(dp[i - 1], a[i] + dp[i - 2])
        i = i + 1

    // Print the maximum subset sum
    print(dp[n])

// Call the calculateMaxSubsetSum function to execute the code
calculateMaxSubsetSum()

-------------------------------------------------------------------------------------------------------------------
//Java Code:
import java.util.Scanner;
 
public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
 
        int n = scanner.nextInt();
        int[] a = new int[n + 1]; // using 1-based indexing
        int i = 1;
        while (i <= n) {
            a[i] = scanner.nextInt();
            i++;
        }
 
        // Calculate subset with maximum sum such that no two elements are adjacent
        // Step 1: declare a dp array
        int[] dp = new int[n + 1];
        int l = 0;
        dp[1] = Math.max(a[1], l);
        dp[2] = Math.max(a[1], Math.max(a[2], l));
        // we calculate the formula dp[i] = max(dp[i-1], a[i] + dp[i-2])
        i = 3;
        while (i <= n) {
            dp[i] = Math.max(dp[i - 1], a[i] + dp[i - 2]);
            i++;
        }
 
        System.out.println(dp[n]);
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
//C++ code
#include <iostream>
#include <algorithm>
using namespace std;
 
int main()
{
   int n ; 
   cin>>n ; 
   int a[n+1]={0};  // declaring the array; //using 1-based indexing
   int i = 1;
   while(i<=n)
   {
      cin>>a[i];
      i++;
   }
   // Calculate subset with maximum sum such that no two elements are adjacent
   // Setp 1: declare an dp array
   int dp[n+1]={0};
   int l = 0;
   dp[1] = max(a[1],l);
   dp[2] = max(a[1],max(a[2],l));
   // we calculated the formula dp[i] = max(dp[i-1],a[i]+dp[i-2])
   i = 3;
   while(i<=n)
   {
     dp[i] = max(dp[i-1],a[i] + dp[i-2]);
     i++;
   }
 
   cout<<dp[n];
   return 0;
}
